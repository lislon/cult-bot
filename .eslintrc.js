module.exports = {
    root: true,
    parser: '@typescript-eslint/parser',
    plugins: [
        '@typescript-eslint',
        'jest'
    ],
    extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:jest/recommended',
        // 'prettier',
        // 'prettier/@typescript-eslint'
    ],
    "env": {
        "browser": true,
        "es6": true,
        "node": true
    },
    "rules": {
        "no-misleading-character-class": "warn",
        "@typescript-eslint/no-unused-vars": "off"
    }
};

/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
// module.exports = {
//     "env": {
//         "browser": true,
//         "es6": true,
//         "node": true
//     },
//     "extends": [
//         "prettier",
//         "prettier/@typescript-eslint"
//     ],
//     "parser": "@typescript-eslint/parser",
//     "parserOptions": {
//         "project": "tsconfig.json",
//         "sourceType": "module"
//     },
//     "plugins": [
//         "eslint-plugin-no-null",
//         "eslint-plugin-jsdoc",
//         "@typescript-eslint",
//         "@typescript-eslint/tslint"
//     ],
//     "rules": {
//         "@typescript-eslint/indent": "error",
//         "@typescript-eslint/member-delimiter-style": [
//             "off",
//             {
//                 "multiline": {
//                     "delimiter": "none",
//                     "requireLast": true
//                 },
//                 "singleline": {
//                     "delimiter": "semi",
//                     "requireLast": false
//                 }
//             }
//         ],
//         "@typescript-eslint/naming-convention": "error",
//         "@typescript-eslint/prefer-namespace-keyword": "error",
//         "@typescript-eslint/quotes": [
//             "error",
//             "single",
//             {
//                 "avoidEscape": true
//             }
//         ],
//         "@typescript-eslint/semi": [
//             "off",
//             null
//         ],
//         "@typescript-eslint/type-annotation-spacing": "error",
//         "brace-style": [
//             "error",
//             "1tbs"
//         ],
//         "jsdoc/check-alignment": "error",
//         "jsdoc/check-indentation": "error",
//         "jsdoc/newline-after-description": "error",
//         "no-null/no-null": "error",
//         "no-trailing-spaces": "error",
//         "no-var": "error",
//         "prefer-const": "error",
//         "spaced-comment": [
//             "error",
//             "always",
//             {
//                 "markers": [
//                     "/"
//                 ]
//             }
//         ],
//         "@typescript-eslint/tslint/config": [
//             "error",
//             {
//                 "rules": {
//                     "whitespace": [
//                         true,
//                         "check-branch",
//                         "check-decl",
//                         "check-operator",
//                         "check-module",
//                         "check-separator",
//                         "check-type"
//                     ]
//                 }
//             }
//         ]
//     }
// };